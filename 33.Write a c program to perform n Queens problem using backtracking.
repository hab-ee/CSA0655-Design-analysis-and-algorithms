#include <stdio.h>
#include <stdbool.h>

#define N 10 // Maximum board size (adjustable)

int board[N][N]; // Chessboard
int n;           // Board size (number of queens)

// Function to check if a queen can be placed at board[row][col]
bool isSafe(int row, int col) {
    int i, j;

    // Check the row on the left side
    for (i = 0; i < col; i++)
        if (board[row][i])
            return false;

    // Check upper diagonal on left side
    for (i = row, j = col; i >= 0 && j >= 0; i--, j--)
        if (board[i][j])
            return false;

    // Check lower diagonal on left side
    for (i = row, j = col; j >= 0 && i < n; i++, j--)
        if (board[i][j])
            return false;

    return true;
}

// Function to solve the n-Queens problem using backtracking
bool solveNQueens(int col) {
    if (col >= n)
        return true; // All queens are placed

    for (int i = 0; i < n; i++) {
        // Check if the queen can be placed on board[i][col]
        if (isSafe(i, col)) {
            // Place the queen
            board[i][col] = 1;

            // Recur to place rest of the queens
            if (solveNQueens(col + 1))
                return true;

            // If placing queen in board[i][col] doesn't lead to a solution
            board[i][col] = 0; // Backtrack
        }
    }

    return false; // No solution exists
}

// Function to print the board
void printBoard() {
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++)
            printf("%d ", board[i][j]);
        printf("\n");
    }
}

// Main function
int main() {
    // Input the board size
    printf("Enter the number of Queens (n): ");
    scanf("%d", &n);

    // Initialize the board
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            board[i][j] = 0;

    // Solve the n-Queens problem starting from the first column
    if (solveNQueens(0)) {
        printf("Solution found:\n");
        printBoard();
    } else {
        printf("No solution exists for n = %d.\n", n);
    }

    return 0;
}


OUTPUT:
Solution found:
0  1  0  0 
0  0  0  1 
1  0  0  0 
0  0  1  0 
