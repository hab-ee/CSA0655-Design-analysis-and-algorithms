#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10 // Maximum number of vertices (adjustable)

// Function to check if the current color can be assigned to vertex v
bool isSafe(int v, bool graph[MAX_VERTICES][MAX_VERTICES], int V, int colors[], int c) {
    for (int i = 0; i < V; i++) {
        if (graph[v][i] && c == colors[i]) {
            return false;
        }
    }
    return true;
}

// Function to recursively solve the graph coloring problem using backtracking
bool graphColoring(bool graph[MAX_VERTICES][MAX_VERTICES], int V, int colors[], int vertex) {
    if (vertex >= V) {
        return true; // All vertices are colored
    }

    // Try different colors for vertex vertex
    for (int c = 1; c <= V; c++) {
        if (isSafe(vertex, graph, V, colors, c)) {
            colors[vertex] = c; // Assign color c to vertex

            // Recur to assign colors to remaining vertices
            if (graphColoring(graph, V, colors, vertex + 1)) {
                return true;
            }

            // Backtrack: Remove color assignment
            colors[vertex] = 0;
        }
    }

    return false; // No solution found
}

// Function to print the colors assigned to each vertex
void printSolution(int colors[], int V) {
    printf("Vertex colors:\n");
    for (int i = 0; i < V; i++) {
        printf("Vertex %d: Color %d\n", i, colors[i]);
    }
}

int main() {
    int V, E;
    bool graph[MAX_VERTICES][MAX_VERTICES];
    int colors[MAX_VERTICES];

    // Input number of vertices (V) and edges (E)
    printf("Enter number of vertices (max %d): ", MAX_VERTICES);
    scanf("%d", &V);
    printf("Enter number of edges: ");
    scanf("%d", &E);

    // Initialize graph adjacency matrix
    printf("Enter adjacency matrix:\n");
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Initialize colors array
    for (int i = 0; i < V; i++) {
        colors[i] = 0; // 0 means no color is assigned to vertex i
    }

    // Solve graph coloring problem using backtracking
    if (graphColoring(graph, V, colors, 0)) {
        printf("Solution found:\n");
        printSolution(colors, V);
    } else {
        printf("No solution exists.\n");
    }

    return 0;
}



OUTPUT:
Enter number of vertices (max 10): 4
Enter number of edges: 5
Enter adjacency matrix:
0 1 1 1
1 0 1 0
1 1 0 1
1 0 1 0
Solution found:
Vertex colors:
Vertex 0: Color 1
Vertex 1: Color 2
Vertex 2: Color 3
Vertex 3: Color 2
