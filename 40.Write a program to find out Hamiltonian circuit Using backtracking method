#include <stdio.h>
#include <stdbool.h>

#define MAX_VERTICES 10 // Maximum number of vertices (adjustable)

// Function to check if vertex v can be added at position pos in the path
bool isValidMove(int v, bool graph[MAX_VERTICES][MAX_VERTICES], int path[], int pos, int V) {
    // Check if this vertex is an adjacent vertex of the previously added vertex
    if (graph[path[pos - 1]][v] == 0)
        return false;

    // Check if the vertex has already been included
    for (int i = 0; i < pos; i++)
        if (path[i] == v)
            return false;

    return true;
}

// Function to find Hamiltonian Circuit using backtracking
bool hamiltonianCircuit(bool graph[MAX_VERTICES][MAX_VERTICES], int V, int path[], int pos) {
    // Base case: If all vertices are included in the path
    if (pos == V) {
        // And if there is an edge from the last included vertex to the first vertex
        if (graph[path[pos - 1]][path[0]] == 1) {
            // Print the Hamiltonian circuit
            printf("Hamiltonian Circuit found: ");
            for (int i = 0; i < V; i++)
                printf("%d -> ", path[i]);
            printf("%d\n", path[0]);
            return true;
        } else {
            return false; // No Hamiltonian circuit found
        }
    }

    // Try different vertices as the next candidate in the Hamiltonian Circuit
    for (int v = 1; v < V; v++) {
        if (isValidMove(v, graph, path, pos, V)) {
            path[pos] = v; // Add v to the path

            // Recur to construct rest of the path
            if (hamiltonianCircuit(graph, V, path, pos + 1))
                return true;

            // If adding vertex v doesn't lead to a solution, remove it
            path[pos] = -1;
        }
    }

    return false; // No Hamiltonian circuit found
}

int main() {
    int V;
    bool graph[MAX_VERTICES][MAX_VERTICES];

    // Input number of vertices (V)
    printf("Enter the number of vertices (max %d): ", MAX_VERTICES);
    scanf("%d", &V);

    // Input adjacency matrix
    printf("Enter the adjacency matrix (%d x %d):\n", V, V);
    for (int i = 0; i < V; i++) {
        for (int j = 0; j < V; j++) {
            scanf("%d", &graph[i][j]);
        }
    }

    // Initialize path array
    int path[MAX_VERTICES];
    for (int i = 0; i < V; i++)
        path[i] = -1;

    // Starting from vertex 0 as the initial vertex
    path[0] = 0;

    // Try to find Hamiltonian Circuit starting from vertex 0
    if (!hamiltonianCircuit(graph, V, path, 1)) {
        printf("No Hamiltonian Circuit found.\n");
    }

    return 0;
}


OUTPUT:
Enter the number of vertices (max 10): 5
Enter the adjacency matrix (5 x 5):
0 1 0 1 0
1 0 1 1 1
0 1 0 0 1
1 1 0 0 1
0 1 1 1 0
Hamiltonian Circuit found: 0 -> 1 -> 2 -> 4 -> 3 -> 0
